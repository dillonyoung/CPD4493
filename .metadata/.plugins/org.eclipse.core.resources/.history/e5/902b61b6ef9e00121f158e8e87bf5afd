package ca.dillonyoung.tracare;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import android.app.Activity;
import android.content.Intent;
import android.media.AudioRecord.OnRecordPositionUpdateListener;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Gallery;
import android.widget.TableRow;
import android.widget.TextView;

public class EntryListActivity extends Activity {

	public static ArrayList<Entries> entries;
	
	private Gallery galleryEntries;
	private TextView txtEntryWeight;
	private TextView txtEntryHoursSleep;
	private TextView txtEntryQualitySleep;
	private TextView txtEntryEnergyLevel;
	private TextView txtFitness;
	private TextView txtNutrition;
	private TextView txtSymptom;
	private TextView txtSymptomDescription;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.entrylist);

		galleryEntries = (Gallery) findViewById(R.id.galleryEntries);
		txtEntryWeight = (TextView) findViewById(R.id.txtEntryWeight);
		txtEntryHoursSleep = (TextView) findViewById(R.id.txtEntryHoursSleep);
		txtEntryQualitySleep = (TextView) findViewById(R.id.txtEntryQualitySleep);
		txtEntryEnergyLevel = (TextView) findViewById(R.id.txtEntryEnergyLevel);
		txtFitness = (TextView) findViewById(R.id.txtEntryFitness);
		txtNutrition = (TextView) findViewById(R.id.txtEntryNutrition);
		txtSymptom = (TextView) findViewById(R.id.txtEntrySymptom);
		txtSymptomDescription = (TextView) findViewById(R.id.txtEntrySymptomDescription);
	}
	
	public void onResume() {

		super.onResume();
		
		galleryEntries.setAdapter(null);
		galleryEntries.setOnItemSelectedListener(null);
		
		entries = Main.datasourceEntries.getEntries();
		ArrayList<String> entryDate = new ArrayList<String>();
		
		for (int i = 0; i < entries.size(); i++) {
			Date curDate = new Date(entries.get(i).getDateEntered());
			entryDate.add(DateFormat.format("MMMM d, yyyy hh:mm:ss aa", curDate).toString());
		}
		
		System.err.println(entries.size());
		
		ArrayAdapter arrayAdapter2 = new ArrayAdapter(this,
				android.R.layout.simple_gallery_item, entryDate.toArray());
		ArrayAdapter arrayAdapter = arrayAdapter2;

		galleryEntries.setAdapter(arrayAdapter);
		galleryEntries.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				
				// Get the arrays of strings
				int entryIndex = arg2;
				String[] hourssleep = getResources().getStringArray(R.array.hours_of_sleep);
				String[] qualityofsleep = getResources().getStringArray(R.array.quality_of_sleep);
				String[] energylevel = getResources().getStringArray(R.array.energy_level);
				String[] symptom = getResources().getStringArray(R.array.symptom_type);
				
				// Check to see if the weight was tracked for the entry
				if (entries.get(entryIndex).getWeight() == -1) {
					TableRow row = (TableRow) findViewById(R.id.rowEntryWeight);
					row.setVisibility(View.GONE);
				} else {
					TableRow row = (TableRow) findViewById(R.id.rowEntryWeight);
					row.setVisibility(View.VISIBLE);
					txtEntryWeight.setText("Weight: " + String.format("%f", entries.get(entryIndex).getWeight()));
				}
				
				// Check to see if the hours of sleep was tracked for the entry
				if (entries.get(entryIndex).getHoursSleep() == -1) {
					TableRow row = (TableRow) findViewById(R.id.rowEntryHoursSleep);
					row.setVisibility(View.GONE);
				} else {
					TableRow row = (TableRow) findViewById(R.id.rowEntryHoursSleep);
					row.setVisibility(View.VISIBLE);
					txtEntryHoursSleep.setText(hourssleep[(int)entries.get(entryIndex).getHoursSleep()]);
				}
				
				// Check to see if the quality of sleep was tracked for the entry
				if (entries.get(entryIndex).getQualityOfSleep() == -1) {
					TableRow row = (TableRow) findViewById(R.id.rowEntryQualitySleep);
					row.setVisibility(View.GONE);
				} else {
					TableRow row = (TableRow) findViewById(R.id.rowEntryQualitySleep);
					row.setVisibility(View.VISIBLE);
					txtEntryQualitySleep.setText(qualityofsleep[(int)entries.get(entryIndex).getQualityOfSleep()]);
				}
				
				// Check to see if the energy level was tracked for the entry
				if (entries.get(entryIndex).getEnergyLevel() == -1) {
					TableRow row = (TableRow) findViewById(R.id.rowEntryEnergyLevel);
					row.setVisibility(View.GONE);
				} else {
					TableRow row = (TableRow) findViewById(R.id.rowEntryEnergyLevel);
					row.setVisibility(View.VISIBLE);
					txtEntryEnergyLevel.setText(energylevel[(int)entries.get(entryIndex).getEnergyLevel()]);
				}
				
				// Check to see if the fitness activity was tracked for the entry
				if (entries.get(entryIndex).getFitness().equals("<{[blank]}>")) {
					TableRow row = (TableRow) findViewById(R.id.rowEntryFitness);
					row.setVisibility(View.GONE);
				} else {
					TableRow row = (TableRow) findViewById(R.id.rowEntryFitness);
					row.setVisibility(View.VISIBLE);
					txtFitness.setText(entries.get(entryIndex).getFitness());
				}
				
				// Check to see if the nutrition was tracked for the entry
				if (entries.get(entryIndex).getNutrition().equals("<{[blank]}>")) {
					TableRow row = (TableRow) findViewById(R.id.rowEntryNutrition);
					row.setVisibility(View.GONE);
				} else {
					TableRow row = (TableRow) findViewById(R.id.rowEntryNutrition);
					row.setVisibility(View.VISIBLE);
					txtNutrition.setText(entries.get(entryIndex).getNutrition());
				}
				
				// Check to see if the symptoms was tracked for the entry
				if (entries.get(entryIndex).getSymptom() == -1) {
					TableRow row1 = (TableRow) findViewById(R.id.rowEntrySymptom);
					row1.setVisibility(View.GONE);
					TableRow row2 = (TableRow) findViewById(R.id.rowEntrySymptomDescription);
					row2.setVisibility(View.GONE);
				} else {
					TableRow row1 = (TableRow) findViewById(R.id.rowEntrySymptom);
					row1.setVisibility(View.VISIBLE);
					TableRow row2 = (TableRow) findViewById(R.id.rowEntrySymptomDescription);
					row2.setVisibility(View.VISIBLE);
					txtSymptom.setText(symptom[(int)entries.get(entryIndex).getSymptom()]);
					txtSymptomDescription.setText(entries.get(entryIndex).getSymptomDescription());
				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
				// TODO Auto-generated method stub
				
			}
			
		}); //new GalleryOnItemSelectedListener());
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.entries, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		System.err.println(item.getItemId());
		switch (item.getItemId()) // switch based on selected MenuItem's ID
		{
		case R.id.addEntry:
			// create an Intent to launch the AddEditContact Activity
			Intent addEntry = new Intent(this, AddEntryActivity.class);

			// pass the selected contact's data as extras with the Intent
//			addEditContact.putExtra(AddressBook.ROW_ID, rowID);
//			addEditContact.putExtra("name", nameTextView.getText());
//			addEditContact.putExtra("phone", phoneTextView.getText());
//			addEditContact.putExtra("email", emailTextView.getText());
//			addEditContact.putExtra("street", streetTextView.getText());
//			addEditContact.putExtra("city", cityTextView.getText());
			startActivity(addEntry); // start the Activity
			return true;
		default:
			return super.onOptionsItemSelected(item);
		} 
	} 
}
